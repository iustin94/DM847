df_times
plot(values, matrix_times)
matrix_times <- character()
df_times <- character()
values <- character()
for(i in seq(100000,1000000,100000)){
my.matrix <- matrix(runif(i), ncol=100)
my.datframe <- as.data.frame(my.matrix)
values <- c(values, i)
matrix_times <- c(matrix_times, system.time(colMeans(my.matrix))[3])
df_times <- c(df_times, system.time(colMeans(my.datframe))[3])
}
values
matrix_times
df_times
plot(values, matrix_times)
matrix_times <- character()
df_times <- character()
values <- character()
for(i in seq(10000000,100000000,10000000)){
my.matrix <- matrix(runif(i), ncol=100)
my.datframe <- as.data.frame(my.matrix)
values <- c(values, i)
matrix_times <- c(matrix_times, system.time(colMeans(my.matrix))[3])
df_times <- c(df_times, system.time(colMeans(my.datframe))[3])
}
plot(values, matrix_times)
par(mfrow=c(2,1))
par(mfrow=c(2,1))
plot(values, matrix_times, cex=2)
plot(values, df_times, cex=2)
plot(values, matrix_times, pch=16)
plot(values, df_times, pch=16)
par(oma=c(1,2,2,1))
plot(values, matrix_times, pch=16)
plot(values, df_times, pch=16)
par(mfrow=c(2,1))
par(oma=c(1,1,1,1))
plot(values, matrix_times, pch=16)
plot(values, df_times, pch=16)
par(oma=c(1,,0,1))
par(oma=c(1,0,0,1))
plot(values, matrix_times, pch=16)
plot(values, df_times, pch=16)
par(mfrow=c(2,1))
par(oma=c(0,0,0,0))
plot(values, matrix_times, pch=16)
plot(values, df_times, pch=16)
par(mfrow=c(2,1))
par(oma=c(0,0,0,0))
apr(mar=c(0,0,0,0))
par(mfrow=c(2,1))
par(oma=c(0,0,0,0))
par(mar=c(0,0,0,0))
plot(values, matrix_times, pch=16)
plot(values, df_times, pch=16)
plot(values, matrix_times, pch=16)
plot(values, df_times, pch=16)
par(mar=c(1,0,0,0))
plot(values, matrix_times, pch=16)
plot(values, df_times, pch=16)
par(mar=c(1,1,0,0))
plot(values, matrix_times, pch=16)
plot(values, df_times, pch=16)
par(mar=c(1,1,1,1))
plot(values, matrix_times, pch=16)
plot(values, df_times, pch=16)
par(mar=c(1,2,1,1))
plot(values, matrix_times, pch=16)
plot(values, df_times, pch=16)
par(mar=c(1,2,2,1))
plot(values, matrix_times, pch=16)
plot(values, df_times, pch=16)
par(mar=c(2,2,1,1))
plot(values, matrix_times, pch=16)
plot(values, df_times, pch=16)
par(mar=c(3,2,1,1))
plot(values, matrix_times, pch=16)
plot(values, df_times, pch=16)
par(mar=c(2,2,1,1))
plot(values, matrix_times, pch=16)
plot(values, df_times, pch=16)
plot(values, matrix_times, pch=16, main="Matrix Times")
plot(values, df_times, pch=16, main="DataFrame Times")
matrix_times <- character()
df_times <- character()
values <- character()
for(i in seq(10000000,100000000,10000000)){
my.matrix <- matrix(runif(i), ncol=100)
my.datframe <- as.data.frame(my.matrix)
values <- c(values, i)
matrix_times <- c(matrix_times, system.time(colMeans(my.matrix))[3])
df_times <- c(df_times, system.time(colMeans(my.datframe))[3])
}
par(mfrow=c(2,1))
par(oma=c(0,0,0,0))
par(mar=c(2,2,1,1))
plot(values, matrix_times, pch=16, main="Matrix Times")
plot(values, df_times, pch=16, main="DataFrame Times")
len <- "^"(10,1:7)
dat <- vector(length = length(len), mode = "numeric")
mat <- vector(length = length(len), mode = "numeric")
for (i in 1:length(len)){
my.matrix <- matrix(runif(len[i]), ncol = 10)
my.datframe <- as.data.frame(my.matrix)
mat[i] <- system.time(out <- apply(my.matrix, 2, mean))[3]
dat[i] <- system.time(out <- apply(my.datframe, 2, mean))[3]
}
plot(dat ~ len, log = "x", pch = 20, col = "#0000ffaa", type = "b", xlab = "Data size", ylab = "Time")
points(mat ~ len, pch = 20, col = "#ff0000aa", type = "b")
legend("topleft", c("Matrix", "Dataframe"), col = c("#0000ffaa", "#ff0000aa"), pch = 20)
plot(values, matrix_times, col=2, type="b")
points(values, df_times, col=3, type="b")
points(values, matrix_times, col=3, type="b")
plot(values, df_times, col=2, type="b")
points(values, matrix_times, col=3, type="b")
par(mfrow=c(0,))
par(mfrow=c(0,0))
par(mfrow=c(0,0))
par(mfrow=c(1,0))
par(mfrow=c(0,1))
data("LakeHuron")
data("LakeHuron")
LakeHuron
test.data <- data.frame(x=1875:1972, y=as.vector(LakeHuron))
test.data
plot(test.data)
plot(y ~ x, test.data)
lm.out z - lm(y ~ x, test.data)
lm.out <- lm(y ~ x, test.data)
lm.out
summary(lm.out)
line(lm(y~x, test.data))
lines(test.data$x, lm.out$fitted.values, lwd=2, col="red")
abline(lm.out)
plot(y ~ x, test.data)
abline(lm.out)
abline(lm.out, lwd=2, col=2)
lm.out <- lm(log(y-575), ~ x, test.data)
lm.out <- lm(log(y-575) ~ x, test.data)
summer(lm.out)
lm.out <- lm(log(y-575) ~ x, test.data)
summer(lm.out)
summary(lm.out)
plot(y ~ x, test.data)
lines(test.data$x, exp(lm.out$fitted.values)+575)
lines(test.data$x, exp(lm.out$fitted.values)+575, lwd=2, col=2)
lm.out <- lm(y ~ poly(x,2), test.data)
summary(lm.out)
plot(y ~ x, test.data)
lines(test.data$x, lm.out$fitted.values, lwd=2, col=2)
plot(residuals(lm.out))
hist(residuals(lm.out))
qqnorm(residuals(lm.out))
data("airquality")
airquality
pairs(airlquality
)
pairs(airlquality)
pairs(airquality)
airquality <- airquality[rowSums(is.na(airquality))==0,]
lm.out <- lm(Ozone ~ Solar.R + Wind + Temp + Day, airquality)
summary(lm.out)
lm.out <- lm(Ozone ~ Solar.R + Wind + Temp, airquality)
summary(lm.out)
lm.out1 <- lm(Ozone ~ Solar.R + Wind + Temp + Day, airquality)
lm.out2 <- lm(Ozone ~ Solar.R + Wind + Temp, airquality)
anova(lm.out1, lm.out2)
anova(lm.out1, lm.out2)
lm.out3 <- lm(Ozone ~ Solar.R * Temp + Wind, airquality)
summary(lm.out3)
qqnorm(rnorm(5000))
qqnorm(rnorm(10))
qqnorm(rnorm(15))
qqnorm(rnorm(200))
qqnorm(rnorm(5000))
qqnorm(rt(5000))
qqnorm(rt(50000), df=3)
qqnorm(rt(50000, df=3))
qqnorm(runif(5000))
qqnorm(rexp(5000))
par(mfrow=c(2,2))
qqnorm(rnorm(5000))
qqnorm(rt(50000, df=3))
qqnorm(runif(5000))
qqnorm(rexp(5000))
par(mfrow=c(1,1))
data(lh)
library(MASS)
data("Animals")
qqnorm(lh)
qqnorm(Animals)
Animals
length(Animals$body)
length(Animals$brain)
qqnorm(Animals)
lh
qqnorm(x=Animals$body, y=Animals$brain
)
qqnorm(x=Animals$body, y=Animals$brainAnimals
lh
qqnorm(x=Animals$body, y=Animals$brain)
qqnorm(lh)
qqnorm(x=Animals$body, y=Animals$brain)
qqnorm(lh)
qqnorm(Animals)
?qqnorm
qqnorm(Animals)
lh
qqnorm(x=1:48, y=lh)
qqnorm(lh)
qqnorm(x=1:48, y=lh)
qqnorm(x=Animals$body, y=Animals$brain)
qqnorm(log(lh))
qqnorm(x=log(Animals$body), y=log(Animals$brain))
qqnorm(x=Animals$body, y=Animals$brain)
qqnorm(x=log(Animals$body), y=log(Animals$brain))
qqnorm(lh)
qqnorm(log(lh))
qqnorm(lh)
qqnorm(log(lh))
qqnorm(x=Animals$body, y=Animals$brain)
qqnorm(x=log(Animals$body), y=log(Animals$brain))
boxplot(lh)
boxplot(Animals)
boxplot(log(Animals))
boxplot(lh)
boxplot(log(lh))
boxplot(lh)
boxplot(log(lh))
boxplot(Animals)
boxplot(log(Animals))
boxplot(lh)
boxplot(Animals)
boxplot(log(Animals))
install.packages(seqLogo)
source("http://bioconductor.org/biocLite.R")
biocLite("seqLogo")
source("http://bioconductor.org/biocLite.R")
biocLite("seqLogo")
update.packages()
setwd("R/Biostastics in R2/")
install.packages(mzR)
install.packages("mzR")
install.packages("devtools")
library(devtools)
version()
version
library(devtools)
install_github(“sneumann/mzR”))
install_github(“sneumann/mzR”)
library(devtools)
install_github(“sneumann/mzR”)
install.packages("mzR")
library(devtools)
install_github("sneumann/mzR")
install_github("sneumann/mzR")
install_github("sneumann/mzR")
library(mzR)
install_github("sneumann/mzR")
install.packages("ncdf")
install.packages("ncdf")
install_github("sneumann/mzR")
library(ncdf4)
install_github(“sneumann/mzR”)
install_github("snemann/mzR")
library(devtools)
install_github("snemann/mzR")
install_github("snemann/mzR")
install_github("sneumann/mzR")
install.packages("netcdf")
install.packages("netcdf4")
library(devtools)
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github("sneumann/mR")
install_github("sneumann/mzR")
install.packages("devtools")
library(devtools)
install_github("sneumann/mzR")
source("https://bioconductor.org/biocLite.R")
update.packages(biocLite())
source("https://bioconductor.org/biocLite.R")
biocLite("mzR")
library(mzR)
install.packages("isobar")
source("https://bioconductor.org/biocLite.R")
biocLite("isobar")
install.packages("qvalue")
biocLite("qvalue")
biocLite("Mfuzz")
biocLite("matrixStats")
biocLite("erah")
library(qvalue)
library(Mfuzz)
library(matrixStats)
library(erah)
plot(random)
random <- nrorm(1000)
plot(random)
random <- nrorm(1000)
random <- rnorm(1000)
plot(random)
hist(random)
random <- rnorm(10000)
hist(random)
plot(random, type="l")
plot(random, type="b")
hist(random, random)
plot(random, random)
#3.1 - Distributions
x <- rnorm(10000, mean=2.5, sd=1.5)
y <- dnorm(x, mean=2.5, sd=1.5)
plot(x,y)
z <- pnorm(x, mean=2.5, sd=1.5)
plot(x,z)
x <- rnorm(10000)
y <- dnorm(x)
plot(x,y) #density distribution
z <- pnorm(x)
plot(x,z) #cumulative distribution
plot(x)
plot(x,x)
plot(x,q)
q <- qnorm(x)
plot(x,q)
q <- qnormx)
hist(x)
box(x)
boxplot(x)
plot(x, type="l")
plot(x,x, type="l")
my.dat <- data.frame(genes=gene.values, condition=rep(c("A","B"), each=4))
## Hypothesis
library(lattice)
# now we do a full t-test
# Problem: is gene differently expressed in control and disease?
gene.values <- c(-0.156779906618839, -1.19258492462641, -0.584097898869027,
-1.05973269590046, 0.241034604602436, 0.622092984491641, 0.429889283129897,
1.21134263252275)
my.dat <- data.frame(genes=gene.values, condition=rep(c("A","B"), each=4))
my.dat
#first argument is the data, second is the category, third is the function to be applied
means <- by(my.dat$genes, my.dat$condition, mean)
sds <- by(my.dat$genes, my.dat$condition, sd)
means
sds
#calculating t-test
t.val <- (means[1] - means[2]) *sqrt(16/8) /msd
msd <- mean(sds) #t-test only uses a combined SD
#calculating t-test
t.val <- (means[1] - means[2]) *sqrt(16/8) /msd
t.val
my.dat
# now we do a full t-test
# Problem: is gene differently expressed in control and disease?
gene.values <- c(-0.156779906618839, -1.19258492462641, -0.584097898869027,
-1.05973269590046, 0.241034604602436, 0.622092984491641, 0.429889283129897,
1.21134263252275)
my.dat <- data.frame(genes=gene.values, condition=rep(c("A","B"), each=4))
my.dat
# in one command
t.test(my.dat[1:4,1], my.dat[5:8,1], var.equal=T)
my.dat
my.dat <- data.frame(genes=gene.values, condition=rep(c("A","B"), each=4))
my.dat
sapply(my.dat, class)
plot(genes~condition, my.dat)
stripplot(genes~condition, my.dat)
# calculate means
means <- by(my.dat$genes, my.dat$condition, mean)
sds <- by(my.dat$genes, my.dat$condition, sd)
sds
# standard deviations are similar -> GOOD!
msd <- mean(sds)
library(Biobase)
data(geneData)
data <- geneData
View(data)
data("ChickWeight")
chick <- ChickWeight
View(chick)
library(Biobase)
data(geneData)
data <- geneData
View(geneData)
## Analysis of variance (Anova)
# equivalence to t.test
A <- data.frame(y=rnorm(100),
x=c(rep("A",50),rep("B",50)))
## Analysis of variance (Anova)
# equivalence to t.test
A <- data.frame(y=rnorm(100),
x=c(rep("A",50),rep("B",50)))
t.out <- t.test(A[A[,2]=="A",1], A[A[,2]=="B",1])
t.out
lm.out <- lm(y~x, A)
summary(lm.out)
# 3 conditions
A <- data.frame(y=rnorm(150),
x=c(rep("A",50),rep("B",50),rep("C",50)))
stripplot(y~x, data=A, ylab="Measurements", xlab="")
plot(y~x,A)
lm.out <- lm(y~x, A)
summary(lm.out)
plot(A$x, residuals(lm.out))
plot(lm.out$fitted.values, lm.out$residuals)
qqnorm(residuals(lm.out))
# now with real data
coagulation <- data.frame(coag=c(62,60,63,59,63,67,71,64,65,66,68,66,71,67,68,68,56,62,60,61,63,64,63,59),
diet=c(rep(1,4),rep(2,6),rep(3,6),rep(4,8)),stringsAsFactors = F)
qqnorm(residuals(lm.out))
lol <- rnorm(1000)
qqnorm(lol)
lol <- rnorm(100000)
qqnorm(lol)
qqnorm(lol)
lol <- rnorm(1000)
qqnorm(lol)
## Analysis of variance (Anova)
# equivalence to t.test
A <- data.frame(y=rnorm(100),
x=c(rep("A",50),rep("B",50)))
t.out <- t.test(A[A[,2]=="A",1], A[A[,2]=="B",1])
t.out
View(A)
anova(A)
View(A)
anova(A$y)
setwd("R/Biostastics in R2/Exercises/Proteomics/R/")
getwd()
setwd("R/Bios in R2/Exercises/Proteomics/R/")
setwd("/R/Bios in R2/Exercises/Proteomics/R/")
setwd("/R/Bios in R2/Exercises/Proteomics/R/")
setwd("C:/Users/ukgam/Documents/R/Bios in R2/Exercises/Proteomics/R/")
getwd()
setwd("C:/Users/ukgam/Documents/R/Bios in R2/Exercises/Proteomics/R/")
x <- rnorm(1000)
plot(x,x)
plot(x)
x <- rnorm(1000)
plot(x)
ex@MetaData
library(erah)
View(ex)
ex
View(ex)
expClasses(ex)
phenoData(ex)
#view different parts of the data
metaData(ex)
library(erah)
ex@MetaData
data("ex")
load("ex.RData")
ex@MetaData
expClasses(ex)
#view different parts of the data
metaData(ex)
phenoData(ex)
ex <- ex
ex
#view different parts of the data
metaData(ex)
expClasses(ex)
ex@MetaData
#set wd and save workspace + load workspace if needed
setwd("C:/Users/ukgam/Documents/BioinfoProject/")
load("./workspace.Rdata")
#1.2 - create a density plot for the IMS data, also saving it to PNG
setwd("C:/Users/ukgam/Documents/BioinfoProject/density_plots/")
for (i in names){
input <- paste("C:/Users/ukgam/Documents/BioinfoProject/data/", i, "_ims.csv", sep="")
input <- read.table(input,header=TRUE, sep=",")
input <- input[-(1:131),-(3)]
png(paste("Density Plot", i, ".png", sep=""), width = 1000, height=600)
cols = rev(colorRampPalette(c("red", "blue", "yellow"))(13))
filled.contour(as.matrix(input[,3:length(input[1,])]),
col=cols,plot.title = title(xlab="tr", ylab="1/k0"))
dev.off()
}
#load in libraries
library(ggplot2)
library(reshape2)
#set wd and save workspace + load workspace if needed
setwd("C:/Users/ukgam/Documents/BioinfoProject/")
save.image("./workspace.Rdata")
#set wd for data management
setwd("C:/Users/ukgam/Documents/BioinfoProject/data/")
#1.5 - load in categories file (type of sweet is factor)
categories <- read.table("./categories.txt",
header=TRUE, sep=",")
#make a list of names of the files
names <- categories[,1]
#1.1 - load in data files each into their own data frame
temp = list.files(pattern="*.csv")
list2env(
lapply(setNames(temp, make.names(gsub("*_ims.csv$", "", temp))),
read.csv), envir = .GlobalEnv)
#inputs the peak result files back into R
setwd("C:/Users/ukgam/Documents/BioinfoProject/peaks_output")
temp = list.files(pattern="*.csv")
list2env(
lapply(setNames(temp, make.names(gsub("*.csv$", "", temp))),
read.table, header=TRUE), envir = .GlobalEnv)
#set wd and save workspace + load workspace if needed
setwd("C:/Users/ukgam/Documents/BioinfoProject/")
save.image("./workspace.Rdata")
load("./workspace.Rdata")
#set wd for data management
setwd("C:/Users/ukgam/Documents/BioinfoProject/data/")
